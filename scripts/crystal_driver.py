# This software is licensed under the BSD 3-Clause License.
# Authors: Teng Zhang (zhteg4@gmail.com)
"""
This driver to build crystal.
"""
import os
import sys

from nemd import xtal
from nemd import jobutils
from nemd import logutils
from nemd import constants
from nemd import stillinger
from nemd import parserutils
from nemd import environutils

PATH = os.path.basename(__file__)
JOBNAME = PATH.split('.')[0].replace('_driver', '')

FlAG_NAME = '-name'
FlAG_DIMENSION = '-dimension'
FlAG_DELTA = '-delta'
FlAG_NAME = '-name'
FLAG_SCALED_FACTOR = '-scale_factor'


def log_debug(msg):
    """
    Print this message into the log file in debug mode.

    :param msg str: the msg to be printed
    """
    if logger:
        logger.debug(msg)


def log(msg, timestamp=False):
    """
    Print this message into log file in regular mode.

    :param msg: the msg to print
    :param timestamp bool: print time after the msg
    """
    if not logger:
        return
    logutils.log(logger, msg, timestamp=timestamp)


def log_error(msg):
    """
    Print this message and exit the program.

    :param msg str: the msg to be printed
    """
    log(msg + '\nAborting...', timestamp=True)
    sys.exit(1)


class CrystalBuilder(object):

    SUBMODULE_PATH = environutils.get_submodule_path()
    ALAMODE = environutils.ALAMODE
    ALAMODE_SRC = os.path.join(SUBMODULE_PATH, ALAMODE, ALAMODE)
    Si_LAMMPS = os.path.join(ALAMODE_SRC, 'example', 'Si_LAMMPS')
    SI_FF = os.path.join(Si_LAMMPS, 'Si.sw')

    def __init__(self, options):
        """
        :param options 'argparse.ArgumentParser': Parsed command-line options
        """
        self.options = options

    def run(self):
        xbuild = xtal.CrystalBuilder(self.options.name,
                                     dim=self.options.dimension,
                                     scale_factor=self.options.scale_factor)
        xbuild.run()
        # ala_writer = alamodeutils.AlaWriter(xbuild.scell, self.options.jobname)
        # ala_writer.run()
        mol = xbuild.getMol()
        lmp_dat = stillinger.LammpsData({1: mol}, self.SI_FF,
                                        self.options.jobname)
        lmp_dat.writeData()
        log(f"LAMMPS data file written as {lmp_dat.lammps_data}")
        lmp_dat.writeLammpsIn()
        log(f"LAMMPS input script written as {lmp_dat.lammps_in}")

    @classmethod
    def getOutfiles(cls, logfile):
        """
        Get the output files based on the log file.

        :param logfile: the log file generated by this class
        :type logfile: str
        :return: task name and the related outfile
        :rtype: dict
        """
        jobname = cls.getLogged(logfile)[0]
        tsks = cls.getLogged(logfile, key=cls.TASK, strip='[]', delimiter=', ')
        return {x: jobname + cls.DATA_EXT % x for x in tsks}

    @classmethod
    def getLogged(cls, logfile, key=None, strip=None, delimiter=None):
        """
        Get the values corresponding to the key in the log file.

        :param logfile: the log file generated by this class
        :type logfile: str
        :param key: the key based on which values are fetched
        :type key: str
        :param delimiter: the chars to strip the string
        :type delimiter: str
        :param delimiter: the delimiter to split the string
        :type delimiter: str
        :return: the matching values in the logfile
        :rtype: list
        """
        pass

    @classmethod
    def combine(cls, files, log, name, inav=False):
        """
        Combine multiple outfiles from the same task into one.

        :param files: task name and the related outfile
        :type files: dict
        :param log: the function to print user-facing information
        :type log: 'function'
        :param name: output files are named based on this name
        :type name: str
        :param inav: pop up window and show plot during code execution if
            interactive mode is on
        :type inav: bool
        """
        pass


def get_parser(parser=None):
    """
    The user-friendly command-line parser.

    :return 'argparse.ArgumentParser':  argparse figures out how to parse those
        out of sys.argv.
    """
    if parser is None:
        parser = parserutils.get_parser(description=__doc__)
    parserutils.add_job_arguments(parser,
                                  jobname=environutils.get_jobname(JOBNAME))
    # crystals.Crystal.builtins
    parser.add_argument(FlAG_NAME, default='Si', choices=['Si'])
    parser.add_argument(FlAG_DIMENSION, default=constants.ONE_ONE_ONE)
    parser.add_argument(FLAG_SCALED_FACTOR,
                        nargs='+',
                        default=constants.ONE_ONE_ONE,
                        type=parserutils.type_positive_float)
    return parser


def validate_options(argv):
    """
    Parse and validate the command args

    :param argv list: list of command input.
    :return: 'argparse.ArgumentParser':  Parsed command-line options out of sys.argv
    """
    parser = get_parser()
    options = parser.parse_args(argv)
    if len(options.scale_factor) == 2:
        parser.error(f"{FLAG_SCALED_FACTOR} is three floats for each lattice "
                     f"vector. ({options.scale_factor} found)")
    options.scale_factor = options.scale_factor[:3]
    if len(options.scale_factor) == 1:
        options.scale_factor = options.scale_factor * 3
    return options


logger = None


def main(argv):

    global logger
    options = validate_options(argv)
    logger = logutils.createDriverLogger(jobname=options.jobname)
    logutils.logOptions(logger, options)
    xtal_builder = CrystalBuilder(options)
    xtal_builder.run()
    log_file = os.path.basename(logger.handlers[0].baseFilename)
    jobutils.add_outfile(log_file, options.jobname, set_file=True)
    log('Finished.', timestamp=True)


if __name__ == "__main__":
    main(sys.argv[1:])
