# -*- coding: utf-8 -*-
"""00_data_shape_type_device.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SOP__PXFz7g4h1JkUtr3O_fXYyjrP7iN
"""

import torch

print(torch.__version__)

scalar = torch.tensor(7)
scalar.item()

vector = torch.tensor([7, 7])
vector.ndim

MATRIX = torch.tensor([[7, 8], [9, 10]])
MATRIX
MATRIX.ndim, MATRIX.shape

TENSOR = torch.tensor([[[1, 2, 3], [1, 3, 5], [7, 2, 7]]])
TENSOR.ndim, TENSOR.shape

# Create a random tensor of size (3, 4)
random_tensor = torch.rand(3, 4)
random_tensor.ndim

random_image_size_tensor = torch.rand(size=(224, 224,
                                            3))  # height, width, color channel
random_image_size_tensor.shape, random_image_size_tensor.ndim

zeros = torch.zeros(size=(3, 4))
zeros

ones = torch.ones(size=(3, 4))
ones, ones.dtype

one_to_ten = torch.arange(0, 10)
ten_zeros = torch.zeros_like(input=one_to_ten)
ten_zeros

float_32_tensor = torch.tensor([3.0, 6, 9],
                               dtype=torch.float32,
                               device=None,
                               requires_grad=False)
float_32_tensor.dtype

float_16_tensor = float_32_tensor.type(torch.float16)
float_16_tensor.dtype

(float_32_tensor * float_16_tensor).dtype

int_32_tensor = torch.tensor([3, 6, 9], dtype=torch.int32)
float_16_tensor * int_32_tensor

int_long_tensor = torch.tensor([3, 6, 9], dtype=torch.long)
(float_16_tensor * int_long_tensor).dtype

some_tensor = torch.rand(3, 4)
print(some_tensor)
